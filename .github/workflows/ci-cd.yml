name: Progressive Framework V5 - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: progressive-framework-v5

jobs:
  # ========================================
  # SETUP & DEPENDENCY MANAGEMENT
  # ========================================
  
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Generate cache key
        id: cache-key
        run: echo "key=npm-${{ hashFiles('package-lock.json') }}-${{ runner.os }}-${{ env.NODE_VERSION }}" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            npm-${{ hashFiles('package-lock.json') }}-${{ runner.os }}-

      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          npm ci --prefer-offline --no-audit --progress=false
        timeout-minutes: 10

      - name: Verify installation
        run: |
          echo "‚úÖ Dependencies ready"
          echo "Node.js: $(node --version)"
          echo "npm: $(npm --version)"

  # ========================================
  # CODE QUALITY CHECKS
  # ========================================
  
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install if cache miss
        run: |
          if [ ! -d "node_modules" ]; then
            npm ci --prefer-offline --no-audit --progress=false
          fi

      - name: Lint code
        run: npm run lint
        continue-on-error: true

      - name: Format check
        run: npm run format:check
        continue-on-error: true

      - name: Security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

  # ========================================
  # TEST SUITE
  # ========================================

  test-suite:
    name: Tests
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install if cache miss
        run: |
          if [ ! -d "node_modules" ]; then
            npm ci --prefer-offline --no-audit --progress=false
          fi

      - name: Create test directories
        run: |
          mkdir -p {data/{conversations,budgets,emergency,backups},test-results,coverage,logs}

      - name: Run tests
        run: npm run test:ci
        timeout-minutes: 10

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test-results/
            coverage/
            logs/
          retention-days: 7

  # ========================================
  # BUILD & PACKAGE
  # ========================================

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [code-quality, test-suite]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install if cache miss
        run: |
          if [ ! -d "node_modules" ]; then
            npm ci --prefer-offline --no-audit --progress=false
          fi

      - name: Build application
        run: npm run build
        timeout-minutes: 5

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            build/
          retention-days: 7

  # ========================================
  # DOCKER BUILD & PUSH
  # ========================================

  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha,prefix={{branch}}-
            type=raw,value={{sha}},enable={{is_default_branch}}
            
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # ========================================
  # DEPLOYMENT
  # ========================================

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging..."
          # Add your deployment commands here

      - name: Smoke tests
        run: npm run test:smoke:staging
        continue-on-error: true

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production..."
          # Add your deployment commands here

      - name: Health check
        run: |
          echo "üè• Running health checks..."
          # Add health check commands here