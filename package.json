{
    "name": "progressive-framework-v5",
    "version": "1.0.0",
    "description": "Complete AI Agent Orchestration System with Emergency Response Capabilities",
    "main": "server.js",
    "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
    },
    "scripts": {
        "start": "node server.js",
        "dev": "nodemon server.js",
        "dev:debug": "nodemon --inspect=0.0.0.0:9229 server.js",
        "build": "npm run lint && npm run test:ci",
        "prepare-ci": "npm run setup:directories",
        "setup:directories": "mkdir data 2>nul & mkdir data\\conversations 2>nul & mkdir data\\budgets 2>nul & mkdir data\\emergency 2>nul & mkdir data\\backups 2>nul & mkdir logs 2>nul",
        "lint": "eslint src/ --ext .js --format json --output-file lint-results.json",
        "lint:fix": "eslint src/ --ext .js --fix",
        "format": "prettier --write \"src/**/*.js\" \"*.js\"",
        "format:check": "prettier --check \"src/**/*.js\" \"*.js\"",
        "test": "jest",
        "test:unit": "jest --testPathPattern=tests/unit --coverage",
        "test:integration": "jest --testPathPattern=tests/integration",
        "test:emergency": "jest --testPathPattern=tests/emergency",
        "test:agents": "jest --testPathPattern=tests/agents",
        "test:backup-restore": "jest --testPathPattern=tests/backup",
        "test:ci": "jest --ci --coverage --watchAll=false",
        "test:coverage": "jest --coverage --coverageReporters=text-lcov > coverage/lcov.info",
        "test:watch": "jest --watch",
        "test:performance:routing": "node tests/performance/routing-performance.js",
        "test:performance:search": "node tests/performance/search-performance.js",
        "test:performance:emergency": "node tests/performance/emergency-performance.js",
        "test:load": "artillery run tests/load/load-test.yml",
        "generate:performance-report": "node scripts/generate-performance-report.js",
        "test:smoke:staging": "node tests/smoke/staging-smoke-test.js",
        "test:smoke:production": "node tests/smoke/production-smoke-test.js",
        "test:health:production": "node tests/health/production-health-check.js",
        "test:emergency:staging": "node tests/emergency/staging-emergency-test.js",
        "test:emergency:production": "node tests/emergency/production-emergency-test.js",
        "docker:build": "docker build -t progressive-framework-v5 .",
        "docker:build:dev": "docker build --target development -t progressive-framework-v5:dev .",
        "docker:build:prod": "docker build --target production -t progressive-framework-v5:prod .",
        "docker:run:dev": "docker-compose -f deploy/docker-compose.dev.yml up",
        "docker:run:prod": "docker-compose -f deploy/docker-compose.prod.yml up -d",
        "docker:stop": "docker-compose down",
        "docker:logs": "docker-compose logs -f",
        "docker:clean": "docker system prune -af",
        "k8s:deploy": "kubectl apply -f deploy/k8s/",
        "k8s:delete": "kubectl delete -f deploy/k8s/",
        "k8s:logs": "kubectl logs -f deployment/progressive-framework-v5 -n progressive-framework",
        "k8s:status": "kubectl get pods -n progressive-framework -l app=progressive-framework-v5",
        "k8s:rollback": "kubectl rollout undo deployment/progressive-framework-v5 -n progressive-framework",
        "k8s:scale": "kubectl scale deployment progressive-framework-v5 --replicas=5 -n progressive-framework",
        "backup:create": "node scripts/create-backup.js",
        "backup:restore": "node scripts/restore-backup.js",
        "backup:list": "node scripts/list-backups.js",
        "backup:cleanup": "node scripts/cleanup-backups.js",
        "emergency:test": "node scripts/test-emergency-system.js",
        "emergency:simulate": "node scripts/simulate-emergency.js",
        "emergency:health": "node scripts/health-check.js",
        "emergency:metrics": "node scripts/collect-metrics.js",
        "monitoring:setup": "node scripts/setup-monitoring.js",
        "monitoring:dashboard": "node scripts/open-dashboard.js",
        "deploy:staging": "npm run build && npm run docker:build:prod && ./scripts/deploy-staging.sh",
        "deploy:production": "npm run build && npm run docker:build:prod && ./scripts/deploy-production.sh",
        "rollback:production": "./scripts/rollback-production.sh",
        "security:audit": "npm audit --audit-level=moderate",
        "security:fix": "npm audit fix",
        "security:scan": "docker run --rm -v \"$PWD\":/app -w /app aquasec/trivy fs .",
        "docs:generate": "jsdoc -c jsdoc.conf.json",
        "docs:serve": "http-server docs/ -p 8080",
        "precommit": "npm run lint && npm run test:unit",
        "prepush": "npm run build && npm run test:ci"
    },
    "keywords": [
        "ai-agents",
        "master-control-agent",
        "nutrition-planning",
        "workout-planning",
        "budget-management",
        "emergency-response",
        "circuit-breaker",
        "conversation-intelligence",
        "semantic-search",
        "enterprise-ai",
        "production-ready"
    ],
    "author": "Progressive Framework V5 Team",
    "license": "MIT",
    "repository": {
        "type": "git",
        "url": "https://github.com/your-org/progressive-framework-v5.git"
    },
    "bugs": {
        "url": "https://github.com/your-org/progressive-framework-v5/issues"
    },
    "homepage": "https://github.com/your-org/progressive-framework-v5#readme",
    "dependencies": {
        "compression": "^1.7.4",
        "cors": "^2.8.5",
        "crypto": "^1.0.1",
        "event-stream": "^4.0.1",
        "events": "^3.3.0",
        "express": "^4.18.2",
        "express-rate-limit": "^8.0.1",
        "fs-extra": "^11.1.1",
        "helmet": "^7.0.0",
        "leven": "^4.0.0",
        "morgan": "^1.10.0",
        "natural": "^8.1.0",
        "stemmer": "^2.0.1",
        "stopword": "^3.1.5",
        "winston": "^3.10.0"
    },
    "devDependencies": {
        "@babel/core": "^7.22.10",
        "@babel/preset-env": "^7.22.10",
        "artillery": "^2.0.1",
        "eslint": "^8.47.0",
        "http-server": "^14.1.1",
        "jest": "^29.6.4",
        "jsdoc": "^4.0.2",
        "nodemon": "^3.0.1",
        "prettier": "^3.0.2",
        "supertest": "^6.3.3"
    },
    "jest": {
        "testEnvironment": "node",
        "coverageDirectory": "coverage",
        "collectCoverageFrom": [
            "src/**/*.js",
            "!src/**/*.test.js",
            "!src/**/node_modules/**"
        ],
        "coverageThreshold": {
            "global": {
                "branches": 80,
                "functions": 80,
                "lines": 80,
                "statements": 80
            }
        },
        "testMatch": [
            "**/tests/**/*.test.js",
            "**/tests/**/*.spec.js"
        ],
        "setupFilesAfterEnv": [
            "<rootDir>/tests/setup.js"
        ]
    },
    "eslintConfig": {
        "env": {
            "node": true,
            "es2021": true,
            "jest": true
        },
        "extends": [
            "eslint:recommended"
        ],
        "rules": {
            "no-console": "warn",
            "no-unused-vars": "error",
            "no-undef": "error",
            "semi": [
                "error",
                "always"
            ],
            "quotes": [
                "error",
                "single"
            ],
            "indent": [
                "error",
                4
            ]
        }
    },
    "prettier": {
        "singleQuote": true,
        "tabWidth": 4,
        "semi": true,
        "trailingComma": "es5",
        "printWidth": 100
    },
    "nodemonConfig": {
        "watch": [
            "src/",
            "server.js"
        ],
        "ext": "js,json",
        "ignore": [
            "data/",
            "logs/",
            "coverage/",
            "node_modules/"
        ],
        "env": {
            "NODE_ENV": "development",
            "DEBUG": "progressive:*"
        }
    }
}
