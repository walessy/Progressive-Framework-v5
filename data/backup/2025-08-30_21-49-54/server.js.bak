// Progressive Framework V5 - Enhanced Server with Memory & Actions
const express = require('express');
const cors = require('cors');

// Import enhanced systems
let MemoryEngine, ActionEngine;
try {
    MemoryEngine = require('./src/memoryEngine');
    ActionEngine = require('./src/actionEngine');
} catch (error) {
    console.log('⚠️ Enhanced engines not found, using basic mode');
}

// Import existing agent system (with fallback)  
let AgentRegistry, MasterControlAgent;
try {
    AgentRegistry = require('./src/agentRegistry');
    MasterControlAgent = require('./src/masterControlAgent');
} catch (error) {
    console.log('ℹ️ Using basic agent simulation');
}

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json({ limit: '10mb' }));

// Initialize systems
let memoryEngine, actionEngine, masterControlAgent;
let enhancedMode = false;

async function initializeSystem() {
    console.log('🚀 Progressive Framework V5 Enhanced - Starting...');
    
    try {
        if (MemoryEngine && ActionEngine) {
            memoryEngine = new MemoryEngine();
            actionEngine = new ActionEngine();
            enhancedMode = true;
            console.log('✅ Enhanced systems initialized');
        }
        
        if (MasterControlAgent && AgentRegistry) {
            const agentRegistry = new AgentRegistry();
            masterControlAgent = new MasterControlAgent(agentRegistry);
            await agentRegistry.initializeRegistry();
            await masterControlAgent.initialize();
            console.log('✅ Agent system initialized');
        }
        
        console.log(`🌟 Framework ready! Enhanced mode: ${enhancedMode ? 'ON' : 'OFF'}`);
    } catch (error) {
        console.log('🔄 Continuing in basic mode...');
    }
}

function getUserId(req) {
    return req.headers['x-user-id'] || req.ip.replace(/[^a-zA-Z0-9-_]/g, '_');
}

function simulateAgentResponse(message) {
    const queryLower = message.toLowerCase();
    
    if (queryLower.includes('nutrition') || queryLower.includes('meal')) {
        return {
            response: "🥗 Nutrition Planning Agent: I can help create personalized meal plans!",
            agent_type: "NPA"
        };
    } else if (queryLower.includes('workout') || queryLower.includes('fitness')) {
        return {
            response: "💪 Workout Planning Agent: I can design custom fitness routines!",
            agent_type: "WPA"
        };
    } else if (queryLower.includes('budget') || queryLower.includes('cost')) {
        return {
            response: "💰 Budget Management Agent: I can help optimize your spending!",
            agent_type: "BMA"
        };
    } else {
        return {
            response: "🤖 Progressive Framework V5: I can help with nutrition, fitness, and budget planning!",
            agent_type: "MCA"
        };
    }
}

// ENHANCED CHAT ENDPOINT
app.post('/chat', async (req, res) => {
    try {
        const startTime = Date.now();
        const { message } = req.body;
        const userId = getUserId(req);

        if (!message) {
            return res.status(400).json({ error: 'Message is required' });
        }

        console.log(`\n🧠 Processing: "${message}" (Enhanced: ${enhancedMode})`);

        let response;

        if (enhancedMode && memoryEngine && actionEngine) {
            // ENHANCED MODE
            const personalizedContext = memoryEngine.getPersonalizedContext(userId);
            console.log(`📊 Personalization: ${Math.round(personalizedContext.personalization_level * 100)}%`);

            // Get base response
            let baseResult;
            if (masterControlAgent) {
                baseResult = await masterControlAgent.processMessage(message, personalizedContext);
            } else {
                baseResult = simulateAgentResponse(message);
            }

            // Enhance with memory
            let enhancedResponse = memoryEngine.enhanceResponseWithMemory(
                baseResult.response, userId, baseResult.agent_type
            );

            // Detect actions
            const actionIntent = actionEngine.detectActionIntent(message, personalizedContext);
            let actionResults = null;

            if (actionIntent.hasActionIntent) {
                console.log(`🎯 Actions detected: ${actionIntent.actionCount}`);
                actionResults = await actionEngine.executeActions(actionIntent, message, personalizedContext, userId);
                
                if (actionResults.successful_executions > 0) {
                    enhancedResponse += `\n\n🎯 **Actions Completed**: ${actionResults.successful_executions} action(s) executed!`;
                }
            }

            // Learn from interaction
            const learningData = memoryEngine.learnFromInteraction(userId, message, enhancedResponse, baseResult.agent_type);

            response = {
                ...baseResult,
                response: enhancedResponse,
                enhanced_mode: true,
                memory_applied: true,
                personalization_level: personalizedContext.personalization_level,
                learning_data: learningData,
                action_results: actionResults,
                actions_executed: actionResults?.successful_executions || 0,
                framework_version: "2.0.0 Enhanced",
                processing_time: Date.now() - startTime
            };

        } else {
            // BASIC MODE
            if (masterControlAgent) {
                response = await masterControlAgent.processMessage(message);
            } else {
                response = simulateAgentResponse(message);
            }
            
            response.enhanced_mode = false;
            response.framework_version = "2.0.0 Basic";
            response.processing_time = Date.now() - startTime;
        }

        console.log(`✅ Response generated in ${response.processing_time}ms`);
        res.json(response);

    } catch (error) {
        console.error('❌ Chat error:', error);
        res.status(500).json({ 
            error: 'Internal server error',
            enhanced_mode: enhancedMode
        });
    }
});

// STATUS ENDPOINT
app.get('/status', (req, res) => {
    const userId = getUserId(req);
    
    let userContext = {};
    let stats = {};
    
    if (enhancedMode && memoryEngine) {
        userContext = memoryEngine.getPersonalizedContext(userId);
        stats = memoryEngine.getMemoryStats();
    }

    res.json({
        name: "Progressive Framework V5 Enhanced",
        version: "2.0.0",
        status: "operational",
        enhanced_mode: enhancedMode,
        agents: ["MCA", "NPA", "WPA", "BMA"],
        user_profile: {
            user_id: userId,
            personalization_level: userContext.personalization_level || 0,
            preferences_learned: Object.keys(userContext.user_preferences || {}).length
        },
        system_stats: stats
    });
});

// HEALTH CHECK
app.get('/api/health', (req, res) => {
    res.json({
        status: 'healthy',
        enhanced_mode: enhancedMode,
        uptime: process.uptime()
    });
});

// ROOT ENDPOINT
app.get('/', (req, res) => {
    res.json({
        name: "Progressive Framework V5 Enhanced",
        version: "2.0.0",
        enhanced_mode: enhancedMode,
        description: enhancedMode ? 
            "AI Agent Orchestration with Memory, Learning, and Action Execution" :
            "AI Agent Orchestration System",
        quick_start: {
            "Try it": "POST /chat with { \"message\": \"I'm vegetarian and prefer home workouts\" }",
            "Check status": "GET /status"
        }
    });
});

// Start server
async function startServer() {
    await initializeSystem();
    
    app.listen(PORT, () => {
        console.log(`\n🎉 Progressive Framework V5 Enhanced - RUNNING!`);
        console.log(`🌐 Server: http://localhost:${PORT}`);
        console.log(`📊 Status: http://localhost:${PORT}/status`);
        console.log(`🌟 Enhanced Mode: ${enhancedMode ? 'ENABLED' : 'DISABLED'}`);
        console.log(`\n✨ Ready to serve requests!`);
    });
}

startServer().catch(error => {
    console.error('❌ Failed to start server:', error);
    process.exit(1);
});